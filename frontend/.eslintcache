[{"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\index.js":"1","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\store.js":"2","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\App.js":"3","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\cartReducer.js":"4","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\userReducers.js":"5","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\productReducers.js":"6","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Header.js":"7","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\orderReducers.js":"8","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Footer.js":"9","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\HomeScreen.js":"10","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProductScreen.js":"11","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\CartScreen.js":"12","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ShippingScreen.js":"13","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\RegisterScreen.js":"14","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\LoginScreen.js":"15","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProfileScreen.js":"16","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\PlaceOrderScreen.js":"17","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProdutListScreen.js":"18","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\OrderScreen.js":"19","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\PaymentScreen.js":"20","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\UserEditScreen.js":"21","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\OrderListScreen.js":"22","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProductEditScreen.js":"23","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\UserListScreen.js":"24","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProductReviewEditScreen.js":"25","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Meta.js":"26","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Loader.js":"27","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Message.js":"28","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\SearchBox.js":"29","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\FormContainer.js":"30","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Product.js":"31","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Rating.js":"32","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\CheckoutSteps.js":"33","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\cartConstants.js":"34","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\userConstants.js":"35","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\orderConstants.js":"36","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\productConstants.js":"37","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\userActions.js":"38","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\productActions.js":"39","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\cartActions.js":"40","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\orderActions.js":"41","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\ProductCarousel.js":"42","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Paginate.js":"43"},{"size":328,"mtime":1607434750330,"results":"44","hashOfConfig":"45"},{"size":3094,"mtime":1615740238780,"results":"46","hashOfConfig":"45"},{"size":2820,"mtime":1615741814241,"results":"47","hashOfConfig":"45"},{"size":1528,"mtime":1607804831379,"results":"48","hashOfConfig":"45"},{"size":5390,"mtime":1607584271104,"results":"49","hashOfConfig":"45"},{"size":8741,"mtime":1615741693199,"results":"50","hashOfConfig":"45"},{"size":2668,"mtime":1609440866318,"results":"51","hashOfConfig":"45"},{"size":5102,"mtime":1607965090852,"results":"52","hashOfConfig":"45"},{"size":421,"mtime":1607285344652,"results":"53","hashOfConfig":"45"},{"size":1840,"mtime":1615742329761,"results":"54","hashOfConfig":"45"},{"size":8661,"mtime":1607977843527,"results":"55","hashOfConfig":"45"},{"size":4495,"mtime":1607977221556,"results":"56","hashOfConfig":"45"},{"size":2671,"mtime":1607610128031,"results":"57","hashOfConfig":"45"},{"size":3630,"mtime":1607610109634,"results":"58","hashOfConfig":"45"},{"size":2462,"mtime":1607609843631,"results":"59","hashOfConfig":"45"},{"size":6485,"mtime":1607610557511,"results":"60","hashOfConfig":"45"},{"size":7614,"mtime":1607977696491,"results":"61","hashOfConfig":"45"},{"size":5182,"mtime":1610084713362,"results":"62","hashOfConfig":"45"},{"size":12239,"mtime":1607977537724,"results":"63","hashOfConfig":"45"},{"size":3999,"mtime":1607977578661,"results":"64","hashOfConfig":"45"},{"size":3298,"mtime":1607610150344,"results":"65","hashOfConfig":"45"},{"size":3616,"mtime":1607977315715,"results":"66","hashOfConfig":"45"},{"size":6418,"mtime":1607977777473,"results":"67","hashOfConfig":"45"},{"size":3615,"mtime":1607610538110,"results":"68","hashOfConfig":"45"},{"size":3510,"mtime":1607610599983,"results":"69","hashOfConfig":"45"},{"size":464,"mtime":1607609752563,"results":"70","hashOfConfig":"45"},{"size":403,"mtime":1607371096305,"results":"71","hashOfConfig":"45"},{"size":248,"mtime":1607371114822,"results":"72","hashOfConfig":"45"},{"size":750,"mtime":1607610742034,"results":"73","hashOfConfig":"45"},{"size":345,"mtime":1607452438012,"results":"74","hashOfConfig":"45"},{"size":1094,"mtime":1607977215648,"results":"75","hashOfConfig":"45"},{"size":1799,"mtime":1607286225421,"results":"76","hashOfConfig":"45"},{"size":1292,"mtime":1607533582060,"results":"77","hashOfConfig":"45"},{"size":276,"mtime":1607804798651,"results":"78","hashOfConfig":"45"},{"size":1527,"mtime":1607451210835,"results":"79","hashOfConfig":"45"},{"size":1444,"mtime":1607965061744,"results":"80","hashOfConfig":"45"},{"size":2616,"mtime":1615740148188,"results":"81","hashOfConfig":"45"},{"size":7426,"mtime":1607610771446,"results":"82","hashOfConfig":"45"},{"size":9983,"mtime":1615741599432,"results":"83","hashOfConfig":"45"},{"size":1783,"mtime":1607804787234,"results":"84","hashOfConfig":"45"},{"size":6773,"mtime":1607965035729,"results":"85","hashOfConfig":"45"},{"size":1411,"mtime":1615741326400,"results":"86","hashOfConfig":"45"},{"size":776,"mtime":1615742028933,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"csd2f4",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\index.js",[],["177","178"],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\store.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\App.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\cartReducer.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\userReducers.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\productReducers.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Header.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\reducers\\orderReducers.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Footer.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\HomeScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProductScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\CartScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ShippingScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\RegisterScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\LoginScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProfileScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\PlaceOrderScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProdutListScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\OrderScreen.js",["179","180","181"],"import React,{useState ,useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Button,Row,Col,ListGroup,Image,Card,Form} from 'react-bootstrap'\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport {getOrderDetails,payOrder,deliverOrder,cancelOrder} from '../actions/orderActions'\r\nimport {updateProductQuantity} from '../actions/productActions'\r\nimport { ORDER_PAY_RESET,ORDER_DELIVER_RESET, ORDER_CANCEL_RESET } from '../constants/orderConstants'\r\nimport Meta from '../components/Meta'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst OrderScreen = ({match,history}) => {\r\n\r\n    const [changeOrderStatus,setchangeOrderStatus] = useState('Ordered')\r\n    const orderId = match.params.id\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const {order,error,loading} = orderDetails\r\n    const dispatch = useDispatch()\r\n    \r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n    \r\n    useEffect(() => {\r\n        \r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n        if(!order || successPay || successDeliver){\r\n            dispatch({type: ORDER_PAY_RESET})\r\n            dispatch({type: ORDER_DELIVER_RESET})\r\n            dispatch(getOrderDetails(orderId))\r\n        }\r\n        if(order){\r\n            setchangeOrderStatus(order.orderStatus)\r\n        }\r\n         \r\n    },[dispatch,order,successPay,successDeliver,history,userInfo])\r\n    \r\n    useEffect(() => {\r\n        dispatch(getOrderDetails(orderId))\r\n    },[orderId])\r\n\r\n    if(!loading){\r\n        const addDecimals = (num) => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n        }\r\n\r\n        order.itemsPrice = addDecimals(order.orderItems.reduce((acc,item) => acc+item.price*item.qty,0))\r\n    }\r\n    const successPaymentHandler = () => {\r\n            const payMentResult = {\r\n                id: order._id,\r\n                status: 'PAID',\r\n                update_time: Date.now(),\r\n                email_address : order.user.email,\r\n            }\r\n        dispatch(payOrder(orderId,payMentResult))\r\n        dispatch(updateProductQuantity(order.orderItems))\r\n        dispatch({type: ORDER_PAY_RESET})\r\n        dispatch({type: ORDER_DELIVER_RESET})\r\n        dispatch(getOrderDetails(orderId))\r\n    }\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order,changeOrderStatus))\r\n    }\r\n\r\n    const cancelOrderHandler = () => {\r\n        //console.log(\"Cancel order clicked:\",order._id);\r\n        dispatch(cancelOrder(order._id));\r\n        dispatch({type: ORDER_CANCEL_RESET})\r\n        dispatch(getOrderDetails(order._id))\r\n    }\r\n\r\n    return loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : (\r\n        <>\r\n            <Meta title=\"All Orders\" />\r\n            <h1>Order {order._id}</h1>\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p><strong className=\"highlight\">NAME: </strong>{order.user.name}</p>\r\n                            <p><strong className=\"highlight\">EMAIL: </strong> <a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\r\n                            <p>\r\n                                <strong className=\"highlight\">ADDRESS: </strong>\r\n                                {order.shippingAddress.address},{order.shippingAddress.city}{' '},\r\n                                {order.shippingAddress.postalCode},{' '}\r\n                                {order.shippingAddress.country}\r\n                            </p>\r\n                            {!order.isPaid ? <Message variant='info'> Order Status: Payment Pending</Message> : (\r\n                                <Message variant='info'>Order Status: {order.orderStatus}</Message>\r\n                            )}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p><strong className=\"highlight\">METHOD: </strong>\r\n                            {order.paymentMethod}</p>\r\n                            {order.isPaid ? <Message variant='success'>Paid on {order.paidAt}</Message> : (\r\n                                <Message variant='danger'>Not Paid</Message>\r\n                            )}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {order.orderItems.length === 0 ? (\r\n                                <Message>Order is empty</Message>\r\n                            ) : (\r\n                                <ListGroup variant='flush'>\r\n                                    {order.orderItems.map( (item,index) => (\r\n                                        <ListGroup.Item key={index}> \r\n                                            <Row>\r\n                                                <Col md={1}>\r\n                                                    <Image\r\n                                                        src={item.image}\r\n                                                        alt={item.name}\r\n                                                        fluid\r\n                                                        rounded\r\n                                                    />\r\n                                                </Col>\r\n                                                <Col>\r\n                                                    <Link to={`/product/${item.product}`}>\r\n                                                        {item.name}\r\n                                                    </Link>\r\n                                                </Col>\r\n                                                <Col md={4}>\r\n                                                    {item.qty} x \r\n                                                    <NumberFormat className=\"noborder\" thousandSeparator={true} thousandsGroupStyle=\"lakh\" prefix={'₹'} value={item.price}/>\r\n                                                    = <NumberFormat className=\"noborder\" thousandSeparator={true} thousandsGroupStyle=\"lakh\" prefix={'₹'} value={(item.qty * item.price).toFixed(2)}/>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n\r\n                            )}\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col md={4} >\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                 <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>Items</Col>\r\n                                <Col>\r\n                                        <NumberFormat className=\"noborder\" thousandSeparator={true} thousandsGroupStyle=\"lakh\" prefix={'₹'} value={order.itemsPrice}/>\r\n                                </Col>\r\n                            </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col><NumberFormat className=\"noborder\" thousandSeparator={true} thousandsGroupStyle=\"lakh\" prefix={'₹'} value={order.shippingPrice}/></Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            \r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total</Col>\r\n                                    <Col>\r\n                                        <NumberFormat className=\"noborder\" thousandSeparator={true} thousandsGroupStyle=\"lakh\" prefix={'₹'} value={order.totalPrice}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>  \r\n                            {!order.isPaid && userInfo._id === order.user._id && (\r\n                                <ListGroup.Item>\r\n                                    {loadingPay && (<Loader />)}\r\n                                    <Button \r\n                                        className='btn btn-block'\r\n                                        onClick = {successPaymentHandler}>\r\n                                            Confirm Payment\r\n                                    </Button>\r\n                                </ListGroup.Item>\r\n                            ) }\r\n                            {!order.isDelivered && order.orderStatus!=='Delivered' && order.isCancelled == false && order.isPaid && (\r\n                                <ListGroup.Item>\r\n                                    {loadingPay && (<Loader />)}\r\n                                    <Button \r\n                                        className='btn btn-block'\r\n                                        onClick = {cancelOrderHandler}>\r\n                                            Cancel Order\r\n                                    </Button>\r\n                                </ListGroup.Item>\r\n                            ) }\r\n                            {loadingDeliver && <Loader />}     \r\n                            {userInfo &&\r\n                                userInfo.isAdmin &&\r\n                                order.isPaid && !order.isCancelled &&\r\n                                !order.isDelivered && (\r\n                                <>\r\n                                    <Form className=\"m-3\" onSubmit={deliverHandler}>\r\n                                    <Form.Group controlId=\"changeOrderStatus\">\r\n                                        <Form.Label>Select Order Status</Form.Label>\r\n                                        <Form.Control \r\n                                            as=\"select\" \r\n                                            custom\r\n                                            value={changeOrderStatus}\r\n                                            onChange={(e) => setchangeOrderStatus(e.target.value)}\r\n                                        >\r\n                                        <option value='Ordered'>Ordered</option>\r\n                                        <option value='Packed'>Packed</option>\r\n                                        <option value='Shipped'>Shipped</option>\r\n                                        <option value='Out For Delivery'>Out For Delivery</option>\r\n                                        <option value='Delivered'>Delivered</option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                    <Button\r\n                                        type='submit'\r\n                                        className='btn btn-block'\r\n                                       \r\n                                        >\r\n                                        Change Order Status\r\n                                        </Button>\r\n                                    </Form>\r\n                                    \r\n                                        \r\n                                    \r\n                                </>\r\n                                )\r\n                                \r\n                            }\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default OrderScreen\r\n","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\PaymentScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\UserEditScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\OrderListScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProductEditScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\UserListScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\screens\\ProductReviewEditScreen.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Meta.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Loader.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Message.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\SearchBox.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\FormContainer.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Product.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Rating.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\CheckoutSteps.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\cartConstants.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\userConstants.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\orderConstants.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\constants\\productConstants.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\userActions.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\productActions.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\cartActions.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\actions\\orderActions.js",["182"],"import{\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_CANCEL_FAIL,\r\n    ORDER_CANCEL_REQUEST,\r\n    ORDER_CANCEL_RESET,\r\n    ORDER_CANCEL_SUCCESS,\r\n} from '../constants/orderConstants'\r\nimport axios from 'axios'\r\n\r\n//CREATE A NEW ORDER\r\nexport const createOrder = (order) => async (dispatch,getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n \r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization : `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const {data} = await axios.post(\r\n            `/api/orders`,\r\n            order,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n        \r\n    }catch(error) {\r\n        dispatch({   \r\n            type:ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.message\r\n        })\r\n    }\r\n}    \r\n\r\n\r\n//GET DETAILS ABOUT A PARTICULAR ORDER\r\nexport const getOrderDetails = (id) => async (dispatch,getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n \r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization : `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const {data} = await axios.get(\r\n            `/api/orders/${id}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n        \r\n    }catch(error) {\r\n        dispatch({   \r\n            type:ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n//PAYMENT FOR A PARTICULAR ORDER\r\nexport const payOrder = (orderId,paymentResult) => async (dispatch,getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n \r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization : `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const {data} = await axios.put(\r\n            `/api/orders/${orderId}/pay`,\r\n            paymentResult,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n        \r\n    }catch(error) {\r\n        dispatch({   \r\n            type:ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//LIST OF ALL THE ORDERS CREATED BY A USER.VIEWED BY USER\r\nexport const listMyOrders = () => async (dispatch,getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n \r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization : `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const {data} = await axios.get(\r\n            `/api/orders/myorders`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n        \r\n    }catch(error) {\r\n        dispatch({   \r\n            type:ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//LIST OF ALL THE ORDERS VIEWED BY ADMIN\r\nexport const listOrders = () => async (dispatch,getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n \r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization : `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const {data} = await axios.get(\r\n            `/api/orders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n        \r\n    }catch(error) {\r\n        dispatch({   \r\n            type:ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//MAKE THE ORDER DELIVERED,ACCESSED ONLY BY ADMIN\r\nexport const deliverOrder = (order,status) => async (dispatch,getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n \r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization : `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const {data} = await axios.put(\r\n            `/api/orders/${order._id}/deliver?status=${status}`, \r\n            {},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload: data\r\n        })\r\n        \r\n    }catch(error) {\r\n        dispatch({   \r\n            type:ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\n//CANCEL ORDER\r\nexport const cancelOrder = (orderId) => async (dispatch,getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_CANCEL_REQUEST\r\n        })\r\n \r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization : `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const {data} = await axios.put(\r\n            `/api/orders/${orderId}/cancelorder`, \r\n            {},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CANCEL_SUCCESS,\r\n            payload: data\r\n        })\r\n        \r\n    }catch(error) {\r\n        dispatch({   \r\n            type:ORDER_CANCEL_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.message\r\n        })\r\n    }\r\n}","D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\ProductCarousel.js",[],"D:\\Web Dev\\Projects\\eKart-Order Management System\\frontend\\src\\components\\Paginate.js",[],{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":44,"column":7,"nodeType":"189","endLine":44,"endColumn":66,"suggestions":"190"},{"ruleId":"187","severity":1,"message":"191","line":48,"column":7,"nodeType":"189","endLine":48,"endColumn":16,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":189,"column":105,"nodeType":"195","messageId":"196","endLine":189,"endColumn":107},{"ruleId":"197","severity":1,"message":"198","line":22,"column":5,"nodeType":"199","messageId":"200","endLine":22,"endColumn":23},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'orderId'. Either include it or remove the dependency array.","ArrayExpression",["203"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["204"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'ORDER_CANCEL_RESET' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [dispatch, order, successPay, successDeliver, history, userInfo, orderId]",{"range":"209","text":"210"},"Update the dependencies array to be: [dispatch, orderId]",{"range":"211","text":"212"},[1763,1822],"[dispatch, order, successPay, successDeliver, history, userInfo, orderId]",[1904,1913],"[dispatch, orderId]"]